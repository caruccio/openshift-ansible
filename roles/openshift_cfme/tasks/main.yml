# PASSED IN ROLE VARIABLES:
#
# - template_dir - A remote temp dir to template the PVs in

---
- name: What are the groups?
  debug:
    var: groups.keys()

- name: Where is my template dir
  debug:
    var: template_dir

######################################################################
- name: Ensure the CFME user exists
  oc_user:
    state: present
    username: "{{ openshift_cfme_user }}"

- name: Ensure the CFME namespace exists with CFME user as admin
  oc_project:
    state: present
    name: "{{ openshift_cfme_project }}"
    display_name: "{{ openshift_cfme_project_description }}"
    admin: "{{ openshift_cfme_user }}"

- name: Ensure the CFME namespace service account is privileged
  oc_adm_policy_user:
    namespace: "{{ openshift_cfme_project }}"
    user: "{{ openshift_cfme_service_account }}"
    resource_kind: scc
    resource_name: privileged
    state: present

######################################################################
- name: Ensure bulk image import limit is tuned
  yedit:
    src: /etc/origin/master/master-config.yaml
    key: 'imagePolicyConfig#maxImagesBulkImportedPerRepository'
    value: "{{ openshift_cfme_maxImagesBulkImportedPerRepository | int() }}"
    state: present
    backup: True
  register: master_config_updated

# TODO: Figure out how to link to the right handlers rather than
# duplicate more restart logic
#  notify: 'config change - restart master service'
- name: TODO Ensure master service is restarted if the config changed
  debug:
    msg: "Not doing anything yet, just a placeholder"
  when: master_config_updated.changed

######################################################################
- name: Create NFS exports for CFME PVs
  copy:
    src: openshift_cfme.exports
    dest: /etc/exports.d/openshift_cfme.exports
  register: nfs_exports_updated

- name: Ensure the NFS export table is refreshed if exports were added
  command: exportfs -ar
  when: nfs_exports_updated.changed

######################################################################
# This needs to happen on the first master
- name: Ensure the CFME PV templates are evaluated
  template:
    src: "{{ item }}.yaml.j2"
    dest: "{{ template_dir }}/{{ item }}.yaml"
  with_items: "{{ openshift_cfme_pv_templates }}"

# BEGIN LONG TODO: There has to be a better way to do this. Must refactor.
- name: Check if the CFME DB PV has been created already
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    state: list
    kind: pv
    name: miq-pv01
  register: miq_pv_01

- name: Ensure CFME DB PV is created
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    kind: pv
    name: "miq-pv-db"
    state: present
    delete_after: True
    files:
    - "{{ template_dir }}/miq-pv-db.yaml"
  when: not miq_pv_01.results.results.0

# ----

- name: Check if the CFME Region PV has been created already
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    state: list
    kind: pv
    name: miq-pv02
  register: miq_pv_02

- name: Ensure CFME Region PV is created
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    kind: pv
    name: "miq-pv-db"
    state: present
    delete_after: True
    files:
    - "{{ template_dir }}/miq-pv-db.yaml"
  when: not miq_pv_02.results.results.0

# ----

- name: Check if the CFME Server PV has been created already
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    state: list
    kind: pv
    name: miq-pv03
  register: miq_pv_03

- name: Ensure CFME Server PV is created
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    kind: pv
    name: "miq-pv-db"
    state: present
    delete_after: True
    files:
    - "{{ template_dir }}/miq-pv-db.yaml"
  when: not miq_pv_03.results.results.0

# END TODO: ^ This needs a refactor
######################################################################

- name: Check if the CFME app template has been created already
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    state: list
    kind: template
    name: manageiq
  register: miq_app

- name: Copy over MIQ app template
  copy:
    src: miq-template.yaml
    dest: "{{ template_dir }}/miq-template.yaml"
  when: not miq_app.results.results.0

- name: "Ensure CFME Server Template is created if it doesn't exist"
  oc_obj:
    namespace: "{{ openshift_cfme_project }}"
    kind: template
    name: "manageiq"
    state: present
    delete_after: True
    files:
    - "{{ template_dir }}/miq-template.yaml"
  when: not miq_app.results.results.0

######################################################################
# Let's do this
- name: Ensure the CFME app is created
  oc_process:
    namespace: "{{ openshift_cfme_project }}"
    template_name: manageiq
    create: True
  register: cfme_new_app_process
  run_once: True

- debug:
    var: cfme_new_app_process

######################################################################

# Various cleanup steps

- name: Ensure the temporary PV/App templates are erased
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - "{{ template_dir }}/*.yaml"

- name: Ensure the temporary PV/app template directory is erased
  file:
    path: "{{ template_dir }}"
    state: absent

######################################################################

- name: Status update
  debug:
    msg: >
      CFME has been deployed. Note that there will be a delay before
      it is fully initialized.
